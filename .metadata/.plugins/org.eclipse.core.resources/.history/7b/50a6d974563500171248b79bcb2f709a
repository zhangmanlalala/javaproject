package Leetcode_reverse_linked_list_II;
/*
 *  Reverse a linked list from position m to n. Do it in-place and in one-pass.
	For example:
	Given 1->2->3->4->5->NULL, m = 2 and n = 4,	
	return 1->4->3->2->5->NULL.
	Note:
	Given m, n satisfy the following condition:
	1 ¡Ü m ¡Ü n ¡Ü length of list. 
 * 
 * 
 */
class ListNode {
     int val;
     ListNode next;
     ListNode(int x) { val = x; }
}
public class Solution {
	
	
    public ListNode reverseBetween(ListNode head, int m, int n) {
    	ListNode root = new ListNode(0);
    	root.next = head;
    	ListNode temp = root,temp_pre;
    	ListNode mNode,mNode_pre,nNode,nNode_pre;
    	
    	int i=0;
    	while(temp!=null){
    		temp_pre = temp;
    		temp = temp.next;
    		i++;
    		if(i==m){
    			mNode = temp;
    			mNode_pre = temp_pre;
    		}else if(i==n){
    			nNode = temp;
    			nNode_pre = temp_pre;
    		}
    	}
    	
    }
    
    
    
}
