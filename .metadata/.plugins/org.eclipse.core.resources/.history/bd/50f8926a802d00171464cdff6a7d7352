package leetcode_076_minimum_window_subString;

import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * 
 *  Given a string S and a string T, find the minimum window in S 
 *  which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"

Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, 
return the empty string "".

If there are multiple such windows, you are guaranteed that there 
will always be only one unique minimum window in S. 
 * 
 * @author Administrator
 *
 */
public class Solution {
	/**
	 * 
	 * 看标准答案
	 * @param s
	 * @param t
	 * @return
	 */
    public String minWindow(String s, String t) {
        
    	
    	//标准答案
    	if(s.length() == 0 || t.length()==0 || s.length()<t.length()){
    		return "";
    	}
    	
    	int count=0,left = 0 ,start = 0,end = s.length()-1;
    	
    	
    	//required中的任何一个字符c出现的次数i，如果i>0,则表示还需要更多，i=0表示刚好满足，i<0表示还有富裕的
    	Map<Character,Integer> required = new HashMap<Character,Integer>();
    	
    	for(int i=0;i<t.length();i++){
    		char c = t.charAt(i);
    		required.put(c, required.containsKey(c)?required.get(c)+1:1);
    	}
    	
    	
    	
    	for(int i=0;i<s.length();i++){
    		char c = s.charAt(i);
    		
    		if(!required.containsKey(c)){
    			continue;
    		}
    		
    		int n = required.get(c);
    		required.put(c, n-1);
    	    count--;
    		
    	    
    	    if(count == 0){
    	    	
    	    	
    	    }
    		char head = s.charAt(queue.peek());
    		while(map.get(head)<0){
    			queue.poll();
    			map.put(head, map.get(head)+1);
    			
    			head = s.charAt(queue.peek());
    		}
    		
    		
    		if(left==0){
    			int new_length=queue.peekLast()-queue.peek()+1;
            	if (new_length<end-start) {
            	    start=queue.peek();
            	    end=queue.peekLast()+1;
            	} 
    		}
    		
    	}
    	
    }
    
    
    public boolean isComplement(Map<Character,Integer> map1,Map<Character,Integer> map2){
    	
    	for(Map.Entry<Character, Integer> entry:map1.entrySet()){
    		char key = entry.getKey();
    		if(map1.get(key)>=map2.get(key)){
    			
    		}else{
    			return false;
    		}
    	}
    	
    	return true;
    }
    
    
    public static void main(String[] args) {
		System.out.println(new Solution().minWindow("bdab", "ab"));
	}
    
}
