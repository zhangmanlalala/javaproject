package LeetCode_56_Unique_Binary_Search_Trees_II;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 * 
 * Given an integer n, generate all structurally unique BST's (binary search trees) that 
 * store values 1...n.

	For example,
	Given n = 3, your program should return all 5 unique BST's shown below. 
 * @author Administrator
 *
 */
public class Solution {
	
	/**
	 * 我自己所有的尝试都失败了，还是看看标准答案，这个坎一直过不去
	 * @param n
	 * @return
	 */
	public List<TreeNode> generateTrees(int n) {
		return generateTrees(0, n-1); 
    }
	
	public List<TreeNode> generateTrees(int begin,int end){
		List<TreeNode> res = new ArrayList<TreeNode>();
		
		if(begin>end){
			res.add(null);
			return res;
		}
		
		//每一个数都当根节点
		
		for(int i=begin;i<end;i++){
			//递归的对左右建数
			//这时可以认为所建的左右子树已经放在left,right里
			
			List<TreeNode> left = generateTrees(begin,i-1);
			List<TreeNode> right = generateTrees(i+1,end);
			
			//当前数为节点，并尝试左边的每一颗数，作为左子树
			//右边的每一颗数作为右子树
			for(int j=0;j<left.size();j++){
				for(int k=0;k<right.size();k++){
					TreeNode root =  new TreeNode(i+1);
					
					root.left = left.get(j);
					root.right = right.get(k);
					res.add(root);
				}
			}
		}
		
		return res;
	}
	
  /**
   * 
   * 回溯算法
   * @param start
   * @param end
   * @param list
   * @param temp
   * @return
   */
	 public void numTrees(int start,int end,int num,List<String> list,List<Integer> temp){
		 
		 if(temp.size()==num){
			 list.add(temp.toString());
			 return;
		 }
		 
		 if(start>end){
			 return ;
		 }
		 
		
		 for(int i=start;i<=end;i++){
			 
			 
			 temp.add(i);
			 
			 //向前搜索；

			numTrees(start,i-1,num,list,temp);	


			numTrees(i+1,end,num,list,temp);

			 
			 temp.remove(temp.size()-1);
			 
			
		 }
		 
	 }
	 
	 public static void main(String[] args) {
		
	}
}



class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode(int x) { val = x; }
}
